esphome:
  name: audiotest
  friendly_name: AudioTest

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret audiotest-api_encryption_key

ota:
  password: !secret audiotest-ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Audiotest Fallback Hotspot"
    password: !secret audiotest-ap_password

captive_portal:
i2s_audio:
  - id: i2s_mic
    i2s_lrclk_pin: GPIO25
    i2s_bclk_pin: GPIO32
  - id: i2s_amp
    i2s_lrclk_pin: GPIO25
    i2s_bclk_pin: GPIO26

microphone:
  - platform: i2s_audio
    id: feather_microphone
    adc_type: external 
    i2s_audio_id: i2s_mic 
    i2s_din_pin: GPIO33
    pdm: false
    bits_per_sample: 32bit
speaker: #media player won't work currently with Piper, have to use speaker component. Media player works with cloud.
  - platform: i2s_audio
    id: media_out
    dac_type: external
    i2s_audio_id: i2s_amp
    i2s_dout_pin: GPIO22
    mode: mono
voice_assistant:
  id: voice_asst
  microphone: feather_microphone
  speaker: media_out
  noise_suppression_level: 4
  auto_gain: 10dBFS
  volume_multiplier: 2
  use_wake_word: false
  on_listening:
    - light.turn_on:
        id: led1
        brightness: 30%
  on_end:
    - script.execute: reset_led
  on_tts_start:
    - light.turn_on:
        id: led1
        brightness: 100%
  on_error:
    - if:
          condition:
            switch.is_off: stop_wake_word
          then:
          - light.turn_on:
              id: led1
              brightness: 100%
              effect: blink
          - switch.turn_on: assist_error
          - delay: 3s
          - script.execute: reset_assist
          - script.wait: reset_assist
          - lambda: |-
              if (code == "wake-provider-missing" || code == "wake-engine-missing") {
                id(use_wake_word).turn_off();
              }

switch:
  - platform: restart
    name: "${friendly_name} Restart"
  - platform: template
    name: Use wake word
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_on:
      - lambda: id(voice_asst).set_use_wake_word(true);
      - if:
          condition:
            not:
              - voice_assistant.is_running
          then:
            - voice_assistant.start_continuous
      - script.execute: reset_led
      - switch.turn_off: assist_error
    on_turn_off:
      - voice_assistant.stop
      - script.execute: reset_led
  - platform: template
    name: Assist Error
    id: assist_error
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_on:
      - switch.turn_off: use_wake_word
      - if:
          condition:
            switch.is_off: stop_wake_word
          then:
          - delay: 30s
          - switch.turn_on: use_wake_word
  - platform: template
    name: Stop wake word
    id: stop_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_on:
      - lambda: id(voice_asst).set_use_wake_word(false);
      - voice_assistant.stop
      - switch.turn_off: assist_error
      - switch.turn_off: use_wake_word
      - script.execute: reset_led
  - platform: template
    name: Voice Assist On
    id: voice_assist_on
    optimistic: true
    on_turn_on:
      - voice_assistant.start:
      - light.turn_on:
          id: led1
          brightness: 100%
    on_turn_off:
      - voice_assistant.stop:
      - light.turn_off:
          id: led1

output:
  - platform: ledc
    pin: GPIO2
    id: gpio_2

light:
  - platform: monochromatic
    output: gpio_2
    id: led1
    name: "LED"

script:
  - id: reset_led
    then:
      - if:
          condition:
            switch.is_on: use_wake_word
          then:
            - light.turn_on:
                id: led1
                brightness: 30%
          else:
            - light.turn_off: led1
  - id: reset_assist
    then:
      - light.turn_off: led1
      - switch.turn_off: use_wake_word
esp32_touch:
  setup_mode: false
binary_sensor:
  - platform: esp32_touch
    name: "ESP32 Touch Pad GPIO4"
    pin: GPIO4
    threshold: 1000
    on_press:
      - switch.turn_on: voice_assist_on
  - platform: esp32_touch
    name: "ESP32 Touch Pad GPIO15"
    pin: GPIO15
    threshold: 1000
    on_press:
      - switch.turn_on: voice_assist_on
  - platform: esp32_touch
    name: "ESP32 Touch Pad GPIO13"
    pin: GPIO13
    threshold: 1000
    on_press:
      - switch.turn_on: voice_assist_on
  - platform: esp32_touch
    name: "ESP32 Touch Pad GPIO12"
    pin: GPIO12
    threshold: 1000
    on_press:
      - switch.turn_on: voice_assist_on
  - platform: esp32_touch
    name: "ESP32 Touch Pad GPIO14"
    pin: GPIO14
    threshold: 1000
    on_press:
      - switch.turn_on: voice_assist_on
  - platform: esp32_touch
    name: "ESP32 Touch Pad GPIO27"
    pin: GPIO27
    threshold: 1000
    on_press:
      - switch.turn_on: voice_assist_on