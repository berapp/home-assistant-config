esphome:
  name: ednamode
  friendly_name: EdnaMode
  on_boot:
    - priority: -100.0 # everything is initialized, system is online - if condition waits for connection
      then:
        if:
          condition:
              - wifi.connected:
          then:
            - light.turn_off: # turns off light waiting on automation to start
                id: rgb_led
                transition_length: 100ms
            - delay: 1s
            # - voice_assistant.start_continuous:
            # - delay: 1800s
            # - switch.turn_on:
            #     id: restart_switch
    - priority: 300.0 # after sensor setup, before WIFI initialization 
      then:
        - light.turn_on: # indication that the controller has power
            id: rgb_led
            brightness: 100%
            red: 100%
            green: 0%
            blue: 0%
            effect: Booting

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: !secret ednamode-api_encryption_key
  # on_client_connected:
  #   then:
  #     - if:
  #         condition:
  #           switch.is_on: use_wake_word
  #         then:
  #           - delay: 1s
  #           - voice_assistant.start_continuous:
  #           - delay: 1s
  #           - voice_assistant.stop:
  #           - delay: 2s
  #           - voice_assistant.start_continuous:
  #           - script.execute: reset_led

ota:
  - platform: esphome
    password: !secret ednamode-ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Ednamode Fallback Hotspot"
    password: !secret ednamode-ap_password

captive_portal:
i2s_audio:
  - id: i2s_in
    i2s_lrclk_pin: GPIO21   #WS / LRC
    i2s_bclk_pin: GPIO22    #SCK /BCLK

microphone:
  - platform: i2s_audio
    id: va_mic
    adc_type: external
    i2s_din_pin: GPIO23    #SD
    channel: left
    pdm: false
    i2s_audio_id: i2s_in
    bits_per_sample: 16bit
    
    # on_data:
    #   - logger.log:
    #       format: "Received %d bytes"
    #       args: ['x.size()']
# speaker: #media player won't work currently with Piper, have to use speaker component. Media player works with cloud.
#   - platform: i2s_audio
#     id: media_out
#     dac_type: external
#     i2s_audio_id: i2s_amp
#     i2s_dout_pin: GPIO22
#     mode: mono
voice_assistant:
  microphone: va_mic
  id: va
  noise_suppression_level: 2.0
  volume_multiplier: 4.0
  on_listening:
    - light.turn_on:
        id: rgb_led
        blue: 100%
        red: 100%
        green: 100%
        brightness: 80%
        effect: pulse
  on_tts_start:
    - light.turn_on:
        id: rgb_led
        blue: 0%
        red: 0%
        green: 100%
        brightness: 50%
        effect: pulse
  on_end:
    - light.turn_off: rgb_led
    - switch.turn_off: listen_button
  #   - delay: 100ms
    # - wait_until:
    #     not:
    #       speaker.is_playing:
    # - script.execute: reset_led
  # on_error:
  #   - if:
  #         condition:
  #           switch.is_off: stop_wake_word
  #         then:
  #         - light.turn_on:
  #             id: rgb_led
  #             blue: 0%
  #             red: 100%
  #             green: 0%
  #             brightness: 50%
  #             effect: none
  #         - switch.turn_on: assist_error
  #         - delay: 1s
  #         - script.execute: reset_assist
  #         - script.wait: reset_assist
  #         - lambda: |-
  #             if (code == "wake-provider-missing" || code == "wake-engine-missing") {
  #               id(use_wake_word).turn_off();
  #             }

switch:
  - platform: restart
    name: "EdnaMode Restart"
    id: restart_switch

  - platform: template
    name: Listen
    id: listen_button
    optimistic: true
    on_turn_on:
      - voice_assistant.start:
          silence_detection: false
  #   entity_category: config
  #   on_turn_on:
  #     - lambda: id(va).set_use_wake_word(true);
  #     - if:
  #         condition:
  #           not:
  #             - voice_assistant.is_running
  #         then:
  #           - voice_assistant.start_continuous
  #     - script.execute: reset_led
  #     - switch.turn_off: assist_error
    on_turn_off:
      - voice_assistant.stop
      - switch.turn_off: listen_button
      - light.turn_off: rgb_led

  # - platform: template
  #   name: Assist Error
  #   id: assist_error
  #   optimistic: true
  #   restore_mode: RESTORE_DEFAULT_OFF
  #   entity_category: config
  #   on_turn_on:
  #     - switch.turn_off: use_wake_word
  #     - if:
  #         condition:
  #           switch.is_off: stop_wake_word
  #         then:
  #         - delay: 10s
  #         - switch.turn_on: use_wake_word
  # - platform: template
  #   name: Stop wake word
  #   id: stop_wake_word
  #   optimistic: true
  #   restore_mode: RESTORE_DEFAULT_OFF
  #   entity_category: config
  #   on_turn_on:
  #     - lambda: id(va).set_use_wake_word(false);
  #     - voice_assistant.stop
  #     - switch.turn_off: assist_error
  #     - switch.turn_off: use_wake_word
  #     - script.execute: reset_led

output:
  - platform: ledc
    id: output_red
    pin: GPIO13
  - platform: ledc
    id: output_green
    pin: GPIO16
  - platform: ledc
    id: output_blue
    pin: GPIO17

light:
  - platform: rgb
    name: "RGB LED"
    red: output_red
    green: output_green
    blue: output_blue
    id: rgb_led
    effects:
      - pulse:
          name: "Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          max_brightness: 50%
      # Use default parameters:
      - random:
      # Customize parameters
      - random:
          name: "My Slow Random Effect"
          transition_length: 30s
          update_interval: 30s
      - random:
          name: "My Fast Random Effect"
          transition_length: 4s
          update_interval: 5s
      - pulse:
          name: "Asymmetrical Pulse"
          transition_length:
            on_length: 1s
            off_length: 500ms
          update_interval: 1.5s
      - strobe:
      - strobe:
          name: Strobe Effect With Custom Values
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 90%
              blue: 0%
              duration: 500ms
            - state: false
              duration: 250ms
            - state: true
              brightness: 100%
              red: 0%
              green: 100%
              blue: 0%
              duration: 500ms
      - flicker:
      - flicker:
          name: Flicker Effect With Custom Values
          alpha: 95%
          intensity: 1.5%

# script:
  # - id: reset_led
  #   then:
  #     - if:
  #         condition:
  #           switch.is_on: use_wake_word
  #         then:
  #           light.turn_off: rgb_led
  # - id: reset_assist
  #   then:
  #     - light.turn_on:
  #         id: rgb_led
  #         blue: 0%
  #         red: 100%
  #         green: 0%
  #         brightness: 25%
  #         effect: Pulse
  #     - switch.turn_off: use_wake_word
esp32_touch:
  setup_mode: false
binary_sensor:
  - platform: esp32_touch
    name: "Listen"
    pin: GPIO4
    threshold: 1000
    on_press:
      - switch.toggle: listen_button
  # - platform: esp32_touch
  #   name: "Stop wake word"
  #   pin: GPIO15
  #   threshold: 1000
  #   on_press:
  #     - switch.toggle: stop_wake_word
  # - platform: esp32_touch
  #   name: "ESP32 Touch Pad GPIO12"
  #   pin: GPIO12
  #   threshold: 1000
  #   on_press:
  #     - switch.turn_on: use_wake_word
  # - platform: esp32_touch
  #   name: "ESP32 Touch Pad GPIO14"
  #   pin: GPIO14
  #   threshold: 1000
  #   on_press:
  #     - switch.turn_on: use_wake_word
  # - platform: esp32_touch
  #   name: "ESP32 Touch Pad GPIO27"
  #   pin: GPIO27
  #   threshold: 1000
  #   on_press:
  #     - switch.turn_on: use_wake_word

sensor:
  - platform: uptime
    name: Uptime Sensor