esphome:
  name: meatthermometer
  friendly_name: MeatThermometer
  on_boot:
    priority: -100
    then:
      - light.turn_on:
          id: rgb_led
          red: 0%
          green: 0%
          blue: 100%
          brightness: 50%
          effect: "Slow Pulse"
        


status_led:
  pin: GPIO2
esp32:
  board: esp32dev
  # framework:
  #   type: arduino
  framework:
    type: esp-idf
    version: recommended

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: !secret meatthermometer-api_encryption_key

ota:
  password: !secret meatthermometer-ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Meatthermometer Fallback Hotspot"
    password: !secret meatthermometer-ap_password

captive_portal:
sensor:
  - platform: ntc
    sensor: resistance_sensor
    accuracy_decimals: 0
    filters:
    - median:
        window_size: 2
        send_every: 1
    # - clamp:
    #     min_value: 0
    #     ignore_out_of_range: true
    calibration:
      # - 429570Ohm -> 0°C
      - 240800Ohm -> 22°C
      - 86500Ohm -> 50°C
      # - 108442Ohm -> 50°C
    # - 20250Ohm -> 100°C
      # - 21800Ohm -> 100°C
      - 19400Ohm -> 100°C
    name: NTC Temperature

  # Example source sensors:
  - platform: resistance
    id: resistance_sensor
    sensor: source_sensor
    accuracy_decimals: 0
    filters:
    - clamp:
        max_value: 800000
        min_value: 5000
        ignore_out_of_range: true
    - median:
        window_size: 50
        send_every: 1
    configuration: DOWNSTREAM
    resistor: 99400Ohm
    # resistor: 9990Ohm
    # resistor: 4700Ohm
    name: Resistance Sensor
  - platform: adc
    id: source_sensor
    pin: GPIO34
    attenuation: auto
    # update_interval: 5s



switch:
  - platform: gpio
    pin: GPIO32
    id: ntc_vcc
  - platform: template
    id: alarmswitch
    optimistic: True
    name: "Alarm"
    turn_on_action:
      then:
      - light.turn_on:
          id: rgb_led
          red: 100%
          green: 0%
          blue: 0%
          brightness: 50%
          effect: none
    turn_off_action:
      then:
      - light.turn_off:
          id: rgb_led

interval:
  - interval: 1s
    then:
      - switch.turn_on: ntc_vcc
      - component.update: source_sensor
      - switch.turn_off: ntc_vcc
light:
  - platform: rgb
    name: "RGB LED"
    red: output_red
    green: output_green
    blue: output_blue
    id: rgb_led
    effects:
      # Use default parameters:
      - random:
      # Customize parameters
      - random:
          name: "My Slow Random Effect"
          transition_length: 30s
          update_interval: 30s
      - random:
          name: "My Fast Random Effect"
          transition_length: 4s
          update_interval: 5s
      - pulse:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100%
      - pulse:
          name: "Slow Pulse"
          # transition_length: 1s      # defaults to 1s
          update_interval: 2s
      - pulse:
          name: "Asymmetrical Pulse"
          transition_length:
            on_length: 1s
            off_length: 500ms
          update_interval: 1.5s
      - strobe:
      - strobe:
          name: Strobe Effect With Custom Values
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 90%
              blue: 0%
              duration: 500ms
            - state: false
              duration: 250ms
            - state: true
              brightness: 100%
              red: 0%
              green: 100%
              blue: 0%
              duration: 500ms
      - flicker:
      - flicker:
          name: Flicker Effect With Custom Values
          alpha: 95%
          intensity: 1.5%


output:
  - platform: ledc
    id: output_red
    pin: GPIO5
  - platform: ledc
    id: output_green
    pin: GPIO18
  - platform: ledc
    id: output_blue
    pin: GPIO21
esp32_touch:
  setup_mode: true

binary_sensor:
  - platform: esp32_touch
    name: "ESP32 Touch Pad GPIO13"
    pin: GPIO13
    threshold: 500
    on_press: 
      then:
        - switch.toggle: alarmswitch

number:
  - platform: template
    name: "Target Temperature"
    optimistic: true
    min_value: 50
    max_value: 400
    initial_value: 160
    step: 1
    id: targettemp
